/**
 * In this code we have a very large array called arr, and very large set of operations
 * Operation #1: Increment the elements within range [i, j] with value val
 * Operation #2: Get max element within range [i, j]
 * Build tree: build_tree(1, 0, N-1)
 * Update tree: update_tree(1, 0, N-1, i, j, value)
 * Query tree: query_tree(1, 0, N-1, i, j)
 * Actual space required by the tree = 2*2^ceil(log_2(n)) - 1
 */

#include<iostream>
#include<bits/stdc++.h>
#include<algorithm>
using namespace std;

#include<string.h>
#include<math.h>

#define N 200005
#define MAX 10000005 // Why? :D
#define inf 1e18
#define ll long long


ll n1;
char c;
ll mrg (ll x ,ll y )
{
    return max(x,y);
}

struct segment_tree
{
    vector<ll> tree;
    void clear()
    {
        tree.clear();
    }

    void init(int num, const vector<ll>& a)
    {
        n1 = num;
        tree.assign(4 * n1, 0ll);
        build(a);
    }

    void build(const vector<ll>& a, int id=0,int ns = 0, int ne = n1-1)
    {
        if(ns==ne){
            tree[id]=a[ns];
            return ;
        }
        int l = 2*id+1;
        int r = l+1;
        int md = ns+(ne-ns)/2;
        build(a,l, ns, md);
        build(a,r, md+1, ne);
        tree[id] = mrg(tree[l],tree[r]);
    }


    ll query(int qs, int qe, int id=0, int ns=0, int ne=n1-1)
    {
        if(ns>qe || qs>ne){
            return 0; ///infnity
        }
        if(qs<=ns && qe>=ne){
            return tree[id];
        }
        int l = 2*id+1;
        int r = l+1;
        int md = ns+(ne-ns)/2;
        ll ndl = query(qs, qe, l, ns, md);
        ll ndr = query(qs, qe,r, md+1,ne);
        return mrg(ndl,ndr );
    }

    void upd(int pos , int val , int id=0, int ns=0,int ne=n1-1)
    {
        if(ns>pos || pos>ne){
            return;
        }
        if(ns==ne){
            tree[id]=val;
            return ;
        }
        int l = 2*id+1;
        int r = l+1;
        int md = ns+(ne-ns)/2;
        upd(pos, val,l, ns, md);
        upd(pos, val, r, md+1, ne);
        tree[id] = mrg(tree[l],tree[r]);
    }
} sta ;


int main() {
    string s;
    cin>>s;
    ll n=s.size();
    segment_tree tr[26];
    for (ll i=0;i<26;i++){
        vector<ll> a;
        c='a'+i;
        for (ll j=0;j<n;j++){
            if(s[j]==c) a.push_back(1);
            else a.push_back(0);
        }
        tr[i].init(n,a);
       /* for (ll j=0;j<a.size();j++){
            cout<<a[j];
        }
        cout<<endl;*/
    }
    ll m;
    cin>>m;
    while(m--){
        ll x;
        cin>>x;
        if (x==1){
            char c;
            ll x;
            cin>>x>>c;
            for (ll i=0;i<26;i++){
                if(tr[i].query(x-1,x-1)){
                    tr[i].upd(x-1,0);
                }
            }
            tr[c-'a'].upd(x-1,1);

        }
        else{
            ll l,r;
            cin>>l>>r;
            ll tot=0;
            for (ll i=0;i<26;i++)
            tot+=tr[i].query(l-1,r-1);
            cout<<tot<<endl;
        }
    }
   /* for (ll j=0;j<26;j++){
    for (ll i=0;i<n;i++){
        cout<<tr[j].query(i,i);
    }
    cout<<endl;
    }*/
}
