#include <bits/stdc++.h>

#define endl '\n'
#define f(i,s,n) for(int i=s;i<n;i++)
#define f1(i,n,s) for(int i=n;i>=s;i--)
#define pb push_back
#define fi first
#define se second

typedef long long ll;

const ll INF = 4e9+5;

const int N =3*1e5+7;
const int MOD = 998244353  ;
using namespace std;
ll pi=3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;

bool isprime(ll n){
	if (n==2) return true;
	if (n<2 || n%2==0) return false;
	for (ll i=3;i*i<=n;i+=2){
		if (n%i==0)
			return false;
	}
	return true;
}


vector<ll> printDivisors(ll n)
{
    // Vector to store half of the divisors
    vector<ll> v;
    for (ll i = 2; i <= sqrt(n); i++) {
        if (n % i == 0) {

            // check if divisors are equal
            if (n / i == i)
                v.pb(i);
            else {
                v.pb(i);

                // push the second divisor in the vector
                v.push_back(n / i);
            }
        }
    }

    return v;
}


 void solve(){
    ll q;
    cin>>q;
    if (isprime(q) || q==1){
        cout<<1<<endl<<0<<endl;
        return;
    }
    vector<ll> h=printDivisors(q);
    vector<ll> k;
   /* for (ll i=0;i<h.size();i++)
        cout<<h[i]<<" ";
    cout<<endl;*/
    for (ll i=0;i<h.size();i++){
        if (isprime(h[i])){
            k.pb(h[i]);
        }
    }
    sort(k.begin(),k.end());
    for (ll i=0;i<k.size();i++){
        ll e=k[i]*k[i];
        ll f;
        if (i>0)
            f=k[i]*k[i-1];
        if (i>0 && f<q && q%f==0){
            cout<<1<<endl;
            cout<<k[0]*k[1]<<endl;
            return;
        }
        else if(q%e==0 && e<q){
            cout<<1<<endl;
            cout<<k[0]*k[0]<<endl;
            return;
        }
    }
    cout<<2<<endl;


 }


int main()
{
    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.precision(30);
   // freopen("input.txt","r",stdin);
   // freopen("output.txt","w",stdout);
    int t=1;
   //1 cin>>t;
    //ll c=1;
    while(t--){
           // cout<<"Case #"<<c<<": ";
            //c++;
            solve();
    }
return 0;
}
